
【文字冒险玩到一半退出了，重新进入后就得重新开始，怎么解决？】
【我想到了一种方法，就是在退出游戏之前，将所有的变量及节点信息整合成一串数字，让玩家记下，而在下一次重新进入游戏时，提供输入这个数字的窗口，并且对改数字进行解析，就可以复原第一次游戏的变量值了,而像是节点位置，字符串等不是数字的信息，也可以穷举所有可能性，然后转化成数字编号】
【下面是一个例子】
-> start
VAR node = 1
//node用来保存位置，就是说游戏进行到哪一小节了
//至于abc都是用来演示的变量
VAR a = 0
VAR b = 0
VAR c = 0
VAR code = 0
//code是密码，玩家最后输入的就是这个
VAR A = 0
//A只是一个关于键盘的变量，无需在意

== start ==
【这行数据用来复核变量的值是否与上一次一致，若第一次打开本游戏即可忽略 a= {a} b= {b} c= {c} node={node}】
~ node = 2
【变量node表示为玩家所处节点的编号】
node= {node}
【现在随机变量a，b, c】
~ a = RANDOM(0,9999)
~ b = RANDOM(0,99)
~ c = RANDOM(0,999)
a= {a} b= {b} c= {c}

【随后对a，b, c, node进行编码并且整合】

{code_abcnote()}
//这里使用函数，编码

【再来试试看解码呢？】
~ code= code_abcnote()
~ decode()
//decode函数用来解码
a= {a} b= {b} c= {c} node={node}

【于是，一个编码和解码的功能就实现了】
-> choose

== choose ==
+ [保存]
【生成编码中....】
【请记住这行编码，随后就可以退出了】
 {code_abcnote()}
++ [返回]
-> choose
+ [读取（已保存过即可选择此选项）]

++ [输入编码]
-> s ->
~ code= A
~ decode()
//这里通过穷举node的值用来跳转到对应小节
{node:
  2:-> start
}

++ [返回]
-> choose


//这里是一个键盘
== s ==

+[0]
~ A=A*10+0
{A}
-> s
+[1]
~ A=A*10+1
{A}
-> s
+[2]
~ A=A*10+2
{A}
-> s
+[3]
~ A=A*10+3
{A}
-> s
+[4]
~ A=A*10+4
{A}
-> s
+[5]
~ A=A*10+5
{A}
-> s
+[6]
~ A=A*10+6
{A}
-> s
+[7]
~ A=A*10+7
{A}
-> s
+[8]
~ A=A*10+8
{A}
-> s
+[9]
~ A=A*10+9
{A}
-> s
+ 撤销
~ A=A/10
{A}

-> s
+ 确定！
->->

//这是用来编码的函数，每个变量最多4位，你可以尝试着自己算一下
== function code_abcnote() ==
~ return (((a*10000+b)*10000+c)*10000+node)+10000*10000*10000*10000


//这是解码的函数，先将玩家输入的密码拆开成一个个数字，然后赋值给对应函数
== function decode() ==
~ a = (code - 10000*10000*10000*10000)/10000/10000/10000
~ b = (code - 10000*10000*10000*10000)/10000/10000 - a*10000
~ c = (code - 10000*10000*10000*10000)/10000 - a*10000*10000-b*10000

~ node = (code - 10000*10000*10000*10000) -a*10000*10000*10000-b*10000*10000 - c*10000


//主要原理就是先将变量组成为一个数字，让玩家记住，下次加载时让玩家输入数字，再拆分成原来的变量的一个个数字就可以了

